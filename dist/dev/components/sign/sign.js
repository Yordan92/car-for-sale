var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var angular2_1 = require('angular2/angular2');
var angular2_2 = require('angular2/angular2');
var Sign = (function () {
    function Sign(fb) {
        var self = this;
        this.myForm = fb.group({
            'firstName': ['', angular2_2.Validators.required],
            'lastName': [''],
            'email': ['', angular2_2.Validators.required],
            'pass': ['', angular2_2.Validators.required],
            're-pass': ['', angular2_2.Validators.required]
        });
        console.log(this.myForm);
    }
    Sign.prototype.submitUser = function (arg) {
    };
    Sign = __decorate([
        angular2_1.Component({
            selector: 'sign',
            viewBindings: [angular2_2.FormBuilder]
        }),
        angular2_1.View({
            directives: [angular2_2.FORM_DIRECTIVES, angular2_1.NgIf],
            template: "\n    <h1>Sign Up </h1>\n    <form class=\"top-bar flex-rows\" [ng-form-model]=\"myForm\" (ng-submit)=\"submitUser(myForm)\">\n    \t<div class=\"flex-fill top-bar\">\n    \t\t<span class=\"flex-fill\">First Name</span>\n    \t\t<input  [ng-form-control]=\"myForm.controls['firstName']\" class=\"flex-fill\" type=\"text\"/>\n    \t</div>\n    \t<div  *ng-if=\"!myForm.controls['firstName'].valid && myForm.controls['firstName'].touched\" class=\"ui error message\" style=\"color: red\">First Name must not be null\n    \t</div>\n    \t<div class=\"flex-fill top-bar\">\n    \t\t<span class=\"flex-fill\">Last Name</span>\n    \t\t<input  [ng-form-control]=\"myForm.controls['lastName']\" class=\"flex-fill\" type=\"text\"/>\n    \t</div>\n\n    \t<div class=\"flex-fill top-bar\">\n    \t\t<span class=\"flex-fill\">email</span>\n    \t\t<input  [ng-form-control]=\"myForm.controls['email']\" class=\"flex-fill\" type=\"text\"/>\n    \t</div>\n\n    \t<div class=\"flex-fill top-bar\">\n    \t\t<span class=\"flex-fill\">Password</span>\n    \t\t<input #passinput [ng-form-control]=\"myForm.controls['pass']\"  class=\"flex-fill\" type=\"password\">\n    \t</div>\n    \t<div  *ng-if=\"!myForm.controls['pass'].valid && myForm.controls['pass'].touched\" class=\"ui error message\" style=\"color: red\">Password must not be  null\n    \t</div>\n\n    \t<div class=\"flex-fill top-bar\">\n    \t\t<span class=\"flex-fill\">Re Password</span>\n    \t\t<input  [ng-form-control]=\"myForm.controls['re-pass']\" class=\"flex-fill\" type=\"password\">\n    \t</div>\n    \t<div  *ng-if=\"!myForm.controls['re-pass'].valid && myForm.controls['re-pass'].touched\" class=\"ui error message\" style=\"color: red\">Re password must not be null\n    \t</div>\n \n    <input type=\"submit\"/>\n    <button>Close</button>\n    </form>\n\t\t",
            styles: ["\n\n\t    "]
        }), 
        __metadata('design:paramtypes', [angular2_2.FormBuilder])
    ], Sign);
    return Sign;
})();
exports.Sign = Sign;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvc2lnbi9zaWduLnRzIl0sIm5hbWVzIjpbIlNpZ24iLCJTaWduLmNvbnN0cnVjdG9yIiwiU2lnbi5zdWJtaXRVc2VyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLHlCQUFvQyxtQkFBbUIsQ0FBQyxDQUFBO0FBSXhELHlCQUFzRSxtQkFBbUIsQ0FBQyxDQUFBO0FBQzFGO0lBb0RDQSxjQUFZQSxFQUFlQTtRQUMxQkMsSUFBSUEsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDYkEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsRUFBRUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7WUFDekJBLFdBQVdBLEVBQUVBLENBQUNBLEVBQUVBLEVBQUVBLHFCQUFVQSxDQUFDQSxRQUFRQSxDQUFDQTtZQUN0Q0EsVUFBVUEsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0E7WUFDaEJBLE9BQU9BLEVBQUVBLENBQUNBLEVBQUVBLEVBQUVBLHFCQUFVQSxDQUFDQSxRQUFRQSxDQUFDQTtZQUNsQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsRUFBRUEsRUFBRUEscUJBQVVBLENBQUNBLFFBQVFBLENBQUNBO1lBQ2pDQSxTQUFTQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxxQkFBVUEsQ0FBQ0EsUUFBUUEsQ0FBQ0E7U0FDcENBLENBQUNBLENBQUNBO1FBRUhBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO0lBQzFCQSxDQUFDQTtJQUVERCx5QkFBVUEsR0FBVkEsVUFBV0EsR0FBR0E7SUFJZEUsQ0FBQ0E7SUFyRUZGO1FBQUNBLG9CQUFTQSxDQUFDQTtZQUNWQSxRQUFRQSxFQUFFQSxNQUFNQTtZQUNoQkEsWUFBWUEsRUFBRUEsQ0FBQ0Esc0JBQVdBLENBQUNBO1NBQzNCQSxDQUFDQTtRQUVEQSxlQUFJQSxDQUFDQTtZQUNKQSxVQUFVQSxFQUFFQSxDQUFDQSwwQkFBZUEsRUFBRUEsZUFBSUEsQ0FBQ0E7WUFDbkNBLFFBQVFBLEVBQUVBLG15REFvQ1RBO1lBQ0VBLE1BQU1BLEVBQUVBLENBQUNBLFlBRVJBLENBQUNBO1NBQ05BLENBQUNBOzthQXVCREE7SUFBREEsV0FBQ0E7QUFBREEsQ0F0RUEsQUFzRUNBLElBQUE7QUFyQlksWUFBSSxPQXFCaEIsQ0FBQSIsImZpbGUiOiJjb21wb25lbnRzL3NpZ24vc2lnbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBWaWV3LCBOZ0lmfSBmcm9tICdhbmd1bGFyMi9hbmd1bGFyMic7XG5pbXBvcnQge1JvdXRlQ29uZmlnLCBST1VURVJfRElSRUNUSVZFU30gZnJvbSAnYW5ndWxhcjIvcm91dGVyJztcbi8vIGltcG9ydCB7VXNlcn0gZnJvbSAnc2VydmljZXMvdXNlcic7XG4vLyBpbXBvcnQge1NpZ25WYWxpZGF0b3JzfSBmcm9tICd2YWxpZGF0b3JzL3NpZ25WYWxpZGF0b3JzJztcbmltcG9ydCB7IEZPUk1fRElSRUNUSVZFUywgRm9ybUJ1aWxkZXIsIENvbnRyb2xHcm91cCwgVmFsaWRhdG9yc30gZnJvbSAnYW5ndWxhcjIvYW5ndWxhcjInO1xuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAnc2lnbicsXG5cdHZpZXdCaW5kaW5nczogW0Zvcm1CdWlsZGVyXVxufSlcblxuQFZpZXcoe1xuXHRcdGRpcmVjdGl2ZXM6IFtGT1JNX0RJUkVDVElWRVMsIE5nSWZdLFxuXHRcdHRlbXBsYXRlOiBgXG4gICAgPGgxPlNpZ24gVXAgPC9oMT5cbiAgICA8Zm9ybSBjbGFzcz1cInRvcC1iYXIgZmxleC1yb3dzXCIgW25nLWZvcm0tbW9kZWxdPVwibXlGb3JtXCIgKG5nLXN1Ym1pdCk9XCJzdWJtaXRVc2VyKG15Rm9ybSlcIj5cbiAgICBcdDxkaXYgY2xhc3M9XCJmbGV4LWZpbGwgdG9wLWJhclwiPlxuICAgIFx0XHQ8c3BhbiBjbGFzcz1cImZsZXgtZmlsbFwiPkZpcnN0IE5hbWU8L3NwYW4+XG4gICAgXHRcdDxpbnB1dCAgW25nLWZvcm0tY29udHJvbF09XCJteUZvcm0uY29udHJvbHNbJ2ZpcnN0TmFtZSddXCIgY2xhc3M9XCJmbGV4LWZpbGxcIiB0eXBlPVwidGV4dFwiLz5cbiAgICBcdDwvZGl2PlxuICAgIFx0PGRpdiAgKm5nLWlmPVwiIW15Rm9ybS5jb250cm9sc1snZmlyc3ROYW1lJ10udmFsaWQgJiYgbXlGb3JtLmNvbnRyb2xzWydmaXJzdE5hbWUnXS50b3VjaGVkXCIgY2xhc3M9XCJ1aSBlcnJvciBtZXNzYWdlXCIgc3R5bGU9XCJjb2xvcjogcmVkXCI+Rmlyc3QgTmFtZSBtdXN0IG5vdCBiZSBudWxsXG4gICAgXHQ8L2Rpdj5cbiAgICBcdDxkaXYgY2xhc3M9XCJmbGV4LWZpbGwgdG9wLWJhclwiPlxuICAgIFx0XHQ8c3BhbiBjbGFzcz1cImZsZXgtZmlsbFwiPkxhc3QgTmFtZTwvc3Bhbj5cbiAgICBcdFx0PGlucHV0ICBbbmctZm9ybS1jb250cm9sXT1cIm15Rm9ybS5jb250cm9sc1snbGFzdE5hbWUnXVwiIGNsYXNzPVwiZmxleC1maWxsXCIgdHlwZT1cInRleHRcIi8+XG4gICAgXHQ8L2Rpdj5cblxuICAgIFx0PGRpdiBjbGFzcz1cImZsZXgtZmlsbCB0b3AtYmFyXCI+XG4gICAgXHRcdDxzcGFuIGNsYXNzPVwiZmxleC1maWxsXCI+ZW1haWw8L3NwYW4+XG4gICAgXHRcdDxpbnB1dCAgW25nLWZvcm0tY29udHJvbF09XCJteUZvcm0uY29udHJvbHNbJ2VtYWlsJ11cIiBjbGFzcz1cImZsZXgtZmlsbFwiIHR5cGU9XCJ0ZXh0XCIvPlxuICAgIFx0PC9kaXY+XG5cbiAgICBcdDxkaXYgY2xhc3M9XCJmbGV4LWZpbGwgdG9wLWJhclwiPlxuICAgIFx0XHQ8c3BhbiBjbGFzcz1cImZsZXgtZmlsbFwiPlBhc3N3b3JkPC9zcGFuPlxuICAgIFx0XHQ8aW5wdXQgI3Bhc3NpbnB1dCBbbmctZm9ybS1jb250cm9sXT1cIm15Rm9ybS5jb250cm9sc1sncGFzcyddXCIgIGNsYXNzPVwiZmxleC1maWxsXCIgdHlwZT1cInBhc3N3b3JkXCI+XG4gICAgXHQ8L2Rpdj5cbiAgICBcdDxkaXYgICpuZy1pZj1cIiFteUZvcm0uY29udHJvbHNbJ3Bhc3MnXS52YWxpZCAmJiBteUZvcm0uY29udHJvbHNbJ3Bhc3MnXS50b3VjaGVkXCIgY2xhc3M9XCJ1aSBlcnJvciBtZXNzYWdlXCIgc3R5bGU9XCJjb2xvcjogcmVkXCI+UGFzc3dvcmQgbXVzdCBub3QgYmUgIG51bGxcbiAgICBcdDwvZGl2PlxuXG4gICAgXHQ8ZGl2IGNsYXNzPVwiZmxleC1maWxsIHRvcC1iYXJcIj5cbiAgICBcdFx0PHNwYW4gY2xhc3M9XCJmbGV4LWZpbGxcIj5SZSBQYXNzd29yZDwvc3Bhbj5cbiAgICBcdFx0PGlucHV0ICBbbmctZm9ybS1jb250cm9sXT1cIm15Rm9ybS5jb250cm9sc1sncmUtcGFzcyddXCIgY2xhc3M9XCJmbGV4LWZpbGxcIiB0eXBlPVwicGFzc3dvcmRcIj5cbiAgICBcdDwvZGl2PlxuICAgIFx0PGRpdiAgKm5nLWlmPVwiIW15Rm9ybS5jb250cm9sc1sncmUtcGFzcyddLnZhbGlkICYmIG15Rm9ybS5jb250cm9sc1sncmUtcGFzcyddLnRvdWNoZWRcIiBjbGFzcz1cInVpIGVycm9yIG1lc3NhZ2VcIiBzdHlsZT1cImNvbG9yOiByZWRcIj5SZSBwYXNzd29yZCBtdXN0IG5vdCBiZSBudWxsXG4gICAgXHQ8L2Rpdj5cbiBcbiAgICA8aW5wdXQgdHlwZT1cInN1Ym1pdFwiLz5cbiAgICA8YnV0dG9uPkNsb3NlPC9idXR0b24+XG4gICAgPC9mb3JtPlxuXHRcdGAsXG5cdCAgICBzdHlsZXM6IFtgXG5cblx0ICAgIGBdXG59KVxuLy8gQENhbkFjdGl2YXRlKChuZXh0LCBwcmV2KSA9PiB7IGNvbnNvbGUubG9nKG5leHQsIHByZXYpO3JldHVybiBmYWxzZTt9KVxuZXhwb3J0IGNsYXNzIFNpZ24ge1xuXHRteUZvcm06IENvbnRyb2xHcm91cDtcblxuXHRjb25zdHJ1Y3RvcihmYjogRm9ybUJ1aWxkZXIpIHsgIFxuXHRcdGxldCBzZWxmID0gdGhpcztcbiAgICBcdHRoaXMubXlGb3JtID0gZmIuZ3JvdXAoeyAgXG5cdFx0XHQnZmlyc3ROYW1lJzogWycnLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcblx0XHRcdCdsYXN0TmFtZSc6IFsnJ10sXG5cdFx0XHQnZW1haWwnOiBbJycsIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxuXHRcdFx0J3Bhc3MnOiBbJycsIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxuXHRcdFx0J3JlLXBhc3MnOiBbJycsIFZhbGlkYXRvcnMucmVxdWlyZWRdXG5cdFx0fSk7XG5cdFx0Ly8gdGhpcy5teUZvcm0udmFsaWRhdG9yID0gdGhpcy5teUZvcm0udmFsaWRhdG9yXG5cdFx0Y29uc29sZS5sb2codGhpcy5teUZvcm0pO1xuXHR9XG5cblx0c3VibWl0VXNlcihhcmcpOiB2b2lkIHtcblx0XHQvLyBpZiAoYXJnLnZhbGlkICYmIGFyZy52YWx1ZS5wYXNzID09PSBhcmcudmFsdWVbJ3JlLXBhc3MnXSkge1xuXHRcdC8vIFx0dGhpcy51c2VyLmdldEluc3RhbmNlKCkucmVnaXN0cmF0ZShhcmcudmFsdWUpO1xuXHRcdC8vIH1cblx0fVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9